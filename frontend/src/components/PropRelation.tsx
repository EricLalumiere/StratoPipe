'use client'

import React, { useState } from 'react'
import { Link } from '@/lib'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { 
  Package, 
  Box, 
  Plus, 
  Edit, 
  Trash2,
  ArrowRight,
  Eye,
  FileText
} from 'lucide-react'

interface PropRelationProps {
  relations: Array<{
    id: number
    physicalProp: {
      id: number
      name: string
      status: string
      condition: string
      location: string
    }
    digitalAsset: {
      id: number
      name: string
      type: string
      status: string
    }
    notes?: string
    usageContext: string
    createdBy: string
    createdDate: string
  }>
  availablePhysicalProps: Array<{
    id: number
    name: string
    status: string
    condition: string
    location: string
  }>
  availableDigitalAssets: Array<{
    id: number
    name: string
    type: string
    status: string
  }>
  onAddRelation?: (relation: any) => void
  onEditRelation?: (relationId: number) => void
  onDeleteRelation?: (relationId: number) => void
}

export default function PropRelation({ 
  relations, 
  availablePhysicalProps, 
  availableDigitalAssets,
  onAddRelation,
  onEditRelation,
  onDeleteRelation
}: PropRelationProps) {
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)
  const [newRelation, setNewRelation] = useState({
    physicalPropId: '',
    digitalAssetId: '',
    usageContext: '',
    notes: ''
  })

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Available': case 'Approved': return 'bg-green-100 text-green-800 border-green-200'
      case 'In Use': case 'Work in Progress': return 'bg-blue-100 text-blue-800 border-blue-200'
      case 'Maintenance': case 'Pending Review': return 'bg-yellow-100 text-yellow-800 border-yellow-200'
      case 'Damaged': case 'Ready to Start': return 'bg-orange-100 text-orange-800 border-orange-200'
      case 'Missing': return 'bg-red-100 text-red-800 border-red-200'
      default: return 'bg-gray-100 text-gray-800 border-gray-200'
    }
  }

  const getConditionColor = (condition: string) => {
    switch (condition) {
      case 'Excellent': return 'bg-green-100 text-green-800 border-green-200'
      case 'Good': return 'bg-blue-100 text-blue-800 border-blue-200'
      case 'Fair': return 'bg-yellow-100 text-yellow-800 border-yellow-200'
      case 'Poor': return 'bg-red-100 text-red-800 border-red-200'
      default: return 'bg-gray-100 text-gray-800 border-gray-200'
    }
  }

  const handleCreateRelation = () => {
    if (!newRelation.physicalPropId || !newRelation.digitalAssetId) return

    const physicalProp = availablePhysicalProps.find(p => p.id === parseInt(newRelation.physicalPropId))
    const digitalAsset = availableDigitalAssets.find(a => a.id === parseInt(newRelation.digitalAssetId))

    if (physicalProp && digitalAsset) {
      const relation = {
        id: Date.now(), // In real app, this would be generated by backend
        physicalProp,
        digitalAsset,
        usageContext: newRelation.usageContext,
        notes: newRelation.notes,
        createdBy: 'Current User', // In real app, this would be the logged-in user
        createdDate: new Date().toISOString().split('T')[0]
      }

      onAddRelation?.(relation)
      setIsCreateDialogOpen(false)
      setNewRelation({
        physicalPropId: '',
        digitalAssetId: '',
        usageContext: '',
        notes: ''
      })
    }
  }

  return (
    <Card className="bg-white shadow-lg">
      <CardHeader className="flex flex-row items-center justify-between pb-2">
        <div>
          <CardTitle className="text-lg font-bold text-slate-900">Physical Prop - 3D Asset Relations</CardTitle>
          <p className="text-xs text-slate-600 mt-0.5">
            Track which physical props correspond to which 3D assets in this take
          </p>
        </div>
        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button size="sm" variant="outline">
              <Plus className="w-4 h-4 mr-2" />
              Add Relation
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[500px]">
            <DialogHeader>
              <DialogTitle>Create Prop-Asset Relation</DialogTitle>
              <DialogDescription>
                Associate a physical prop with its corresponding 3D asset for this take.
              </DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid gap-2">
                <Label htmlFor="physicalProp">Physical Prop</Label>
                <Select value={newRelation.physicalPropId} onValueChange={(value) => 
                  setNewRelation({ ...newRelation, physicalPropId: value })
                }>
                  <SelectTrigger>
                    <SelectValue placeholder="Select physical prop..." />
                  </SelectTrigger>
                  <SelectContent>
                    {availablePhysicalProps.map(prop => (
                      <SelectItem key={prop.id} value={prop.id.toString()}>
                        <div className="flex items-center gap-2">
                          <Package className="w-4 h-4 text-purple-600" />
                          <span>{prop.name}</span>
                          <Badge className={`${getStatusColor(prop.status)} text-xs ml-2`}>
                            {prop.status}
                          </Badge>
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="grid gap-2">
                <Label htmlFor="digitalAsset">3D Asset (Prop Type)</Label>
                <Select value={newRelation.digitalAssetId} onValueChange={(value) => 
                  setNewRelation({ ...newRelation, digitalAssetId: value })
                }>
                  <SelectTrigger>
                    <SelectValue placeholder="Select 3D asset..." />
                  </SelectTrigger>
                  <SelectContent>
                    {availableDigitalAssets.filter(asset => asset.type === 'Prop').map(asset => (
                      <SelectItem key={asset.id} value={asset.id.toString()}>
                        <div className="flex items-center gap-2">
                          <Box className="w-4 h-4 text-blue-600" />
                          <span>{asset.name}</span>
                          <Badge className={`${getStatusColor(asset.status)} text-xs ml-2`}>
                            {asset.status}
                          </Badge>
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="grid gap-2">
                <Label htmlFor="usageContext">Usage Context</Label>
                <Select value={newRelation.usageContext} onValueChange={(value) => 
                  setNewRelation({ ...newRelation, usageContext: value })
                }>
                  <SelectTrigger>
                    <SelectValue placeholder="Select usage context..." />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Hero Prop">Hero Prop (Close-up shots)</SelectItem>
                    <SelectItem value="Stunt Double">Stunt Double (Action sequences)</SelectItem>
                    <SelectItem value="Background">Background (Wide shots)</SelectItem>
                    <SelectItem value="Reference">Reference (Motion capture reference)</SelectItem>
                    <SelectItem value="Backup">Backup (Standby prop)</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="grid gap-2">
                <Label htmlFor="notes">Notes (Optional)</Label>
                <Textarea
                  id="notes"
                  placeholder="Additional notes about this relation..."
                  value={newRelation.notes}
                  onChange={(e) => setNewRelation({ ...newRelation, notes: e.target.value })}
                  rows={3}
                />
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setIsCreateDialogOpen(false)}>
                Cancel
              </Button>
              <Button 
                onClick={handleCreateRelation} 
                disabled={!newRelation.physicalPropId || !newRelation.digitalAssetId}
              >
                Create Relation
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </CardHeader>
      
      <CardContent className="pt-2">
        {relations.length === 0 ? (
          <div className="text-center py-4">
            <div className="flex items-center justify-center gap-2 mb-2">
              <Package className="w-6 h-6 text-slate-300" />
              <ArrowRight className="w-4 h-4 text-slate-300" />
              <Box className="w-6 h-6 text-slate-300" />
            </div>
            <h3 className="text-base font-medium text-slate-900 mb-1">No prop relations defined</h3>
            <p className="text-sm text-slate-600 mb-3">
              Create relations between physical props and their 3D asset counterparts to track which props control which digital assets.
            </p>
            <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
              <DialogTrigger asChild>
                <Button>
                  <Plus className="w-4 h-4 mr-2" />
                  Create First Relation
                </Button>
              </DialogTrigger>
            </Dialog>
          </div>
        ) : (
          <div className="space-y-4">
            {relations.map((relation) => (
              <div key={relation.id} className="p-4 bg-slate-50 rounded-lg border border-slate-200">
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center gap-4">
                    {/* Physical Prop */}
                    <div className="flex items-center gap-3">
                      <div className="p-2 rounded-lg bg-purple-100">
                        <Package className="w-5 h-5 text-purple-600" />
                      </div>
                      <div>
                        <Link 
                          href={`/PhysicalProperty?id=${relation.physicalProp.id}`} 
                          className="font-medium text-blue-600 hover:text-blue-700"
                        >
                          {relation.physicalProp.name}
                        </Link>
                        <div className="flex items-center gap-2 mt-1">
                          <Badge className={getStatusColor(relation.physicalProp.status)}>
                            {relation.physicalProp.status}
                          </Badge>
                          <Badge className={getConditionColor(relation.physicalProp.condition)}>
                            {relation.physicalProp.condition}
                          </Badge>
                        </div>
                        <p className="text-xs text-slate-500 mt-1">{relation.physicalProp.location}</p>
                      </div>
                    </div>

                    {/* Arrow */}
                    <div className="flex flex-col items-center gap-1">
                      <ArrowRight className="w-6 h-6 text-slate-400" />
                      <span className="text-xs text-slate-500 font-medium">controls</span>
                    </div>

                    {/* Digital Asset */}
                    <div className="flex items-center gap-3">
                      <div className="p-2 rounded-lg bg-blue-100">
                        <Box className="w-5 h-5 text-blue-600" />
                      </div>
                      <div>
                        <Link 
                          href={`/Asset?id=${relation.digitalAsset.id}`} 
                          className="font-medium text-blue-600 hover:text-blue-700"
                        >
                          {relation.digitalAsset.name}
                        </Link>
                        <div className="flex items-center gap-2 mt-1">
                          <Badge className={getStatusColor(relation.digitalAsset.status)}>
                            {relation.digitalAsset.status}
                          </Badge>
                          <Badge variant="outline" className="text-xs">
                            {relation.digitalAsset.type}
                          </Badge>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="flex items-center gap-2">
                    <Button size="sm" variant="ghost" onClick={() => onEditRelation?.(relation.id)}>
                      <Edit className="w-4 h-4" />
                    </Button>
                    <Button size="sm" variant="ghost" onClick={() => onDeleteRelation?.(relation.id)}>
                      <Trash2 className="w-4 h-4" />
                    </Button>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                  <div>
                    <span className="text-slate-600 font-medium">Usage Context:</span>
                    <Badge variant="outline" className="ml-2">
                      {relation.usageContext}
                    </Badge>
                  </div>
                  <div>
                    <span className="text-slate-600 font-medium">Created:</span>
                    <span className="ml-2 text-slate-900">{relation.createdBy} • {relation.createdDate}</span>
                  </div>
                </div>

                {relation.notes && (
                  <div className="mt-3 p-3 bg-white rounded border border-slate-200">
                    <div className="flex items-start gap-2">
                      <FileText className="w-4 h-4 text-slate-500 mt-0.5" />
                      <div>
                        <span className="text-sm font-medium text-slate-700">Notes:</span>
                        <p className="text-sm text-slate-600 mt-1">{relation.notes}</p>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
      </CardContent>
    </Card>
  )
}